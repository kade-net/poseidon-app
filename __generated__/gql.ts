/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    query Publications($page: Int!, $size: Int!, $type: Int, $address: String, $types: [Int!], $reaction: Int, $hide: [String!], $muted: [Int!]){\n        publications(pagination: { page: $page, size: $size }, type: $type, creator_address: $address, types: $types, reaction: $reaction, hide: $hide, muted: $muted) {\n            __typename\n            id,\n            timestamp\n            content\n            type\n            stats {\n                comments\n                quotes\n                reposts\n                reactions\n            }\n            creator {\n                address\n                profile {\n                    pfp\n                    bio\n                    display_name\n                }\n                username {\n                    username\n                }\n                id\n            },\n            publication_ref,\n            parent {\n                __typename\n                id,\n                timestamp\n                content\n                type\n                creator {\n                    address\n                    profile {\n                        pfp\n                        bio\n                        display_name\n                    }\n                    username {\n                        username\n                    }\n                    id\n                },\n                publication_ref,\n                stats {\n                    comments\n                    quotes\n                    reposts\n                    reactions\n                }\n            }\n            community {\n                name\n                image\n            }\n        }\n    }\n": types.PublicationsDocument,
    "\n    query MyProfile($address: String!) {\n    account(address: $address) {\n        id\n        address\n        profile {\n            display_name\n            bio\n            pfp\n        }\n        username {\n            username\n        }\n        timestamp\n    }\n}\n": types.MyProfileDocument,
    "\n    query AccountStats($accountAddress: String!) {\n        accountStats(accountAddress: $accountAddress) {\n            followers\n            following\n        }\n    }\n": types.AccountStatsDocument,
    "\n    query AccountViewerStats($accountAddress: String!, $viewerAddress: String!) {\n    accountViewerStats(\n        accountAddress: $accountAddress\n        viewerAddress: $viewerAddress\n    ) {\n        id\n        follows\n        followed\n    }\n}\n": types.AccountViewerStatsDocument,
    "\n    query Publication($postRef: String!){\n        publication(ref: $postRef){\n            __typename\n            id,\n                timestamp\n                content\n                stats {\n                    comments\n                    quotes\n                    reposts\n                    reactions\n                }\n                creator {\n                    address\n                    profile {\n                        pfp\n                        bio\n                        display_name\n                    }\n                    username {\n                        username\n                    }\n                    id\n                },\n                publication_ref\n                parent {\n                    __typename\n                    id,\n                    timestamp\n                    content\n                    type\n                    creator_id\n                    creator {\n                        address\n                        profile {\n                            pfp\n                            bio\n                            display_name\n                        }\n                        username {\n                            username\n                        }\n                        id\n                    },\n                    publication_ref,\n                    stats {\n                        comments\n                        quotes\n                        reposts\n                        reactions\n                    }\n                }\n        }\n    }\n": types.PublicationDocument,
    "\n    query PublicationStats($publication_ref: String!){\n        publicationStats(ref: $publication_ref) {\n        __typename\n        reposts\n        quotes\n        comments\n        reactions\n        ref\n    }\n    }\n": types.PublicationStatsDocument,
    "\n    query PublicationInteractionsByViewer($ref: String!, $address: String!){\n        publicationInteractionsByViewer(ref: $ref , address: $address) {\n            __typename\n            reacted\n            quoted\n            quote_refs\n            commented\n            comment_refs\n            reposted\n            repost_refs\n            ref\n        }\n    }\n": types.PublicationInteractionsByViewerDocument,
    "\n    query PublicationComments($publication_ref: String!, $page: Int!, $size: Int!, $hide: [String!], $muted: [Int!]) {\n        publicationComments(ref: $publication_ref, pagination: { page: $page, size: $size }, hide: $hide, muted: $muted) {\n            id\n            content\n            type\n            timestamp\n            publication_ref\n            creator {\n                address\n                profile {\n                    pfp\n                    bio\n                    display_name\n                }\n                username {\n                    username\n                }\n                id\n            }\n        }\n    }\n": types.PublicationCommentsDocument,
    "\n    query Communities($search: String, $page: Int!, $size: Int!, $member: String) {\n        communities(search: $search, pagination: {page: $page, size: $size}, memberAddress: $member) {\n            id\n            name\n            description\n            image\n            timestamp\n            display_name\n        }\n    }\n": types.CommunitiesDocument,
    "\n    query Community($name: String!){\n        community(name: $name) {\n            id\n            name\n            description\n            image\n            timestamp\n            display_name\n            creator {\n                address\n                username {\n                    username\n                }        \n            } \n            stats {\n                members\n                publications\n            }\n        }\n    }\n": types.CommunityDocument,
    "\n    query CommunityPublications($page: Int!, $size: Int!, $communityName: String!, $hide: [String!], $muted: [Int!]) {\n        communityPublications(\n            pagination: { page: $page, size: $size }\n            communityName: $communityName,\n            hide: $hide,\n            muted: $muted\n        ) {\n            __typename\n            id\n            timestamp\n            content\n            type\n            stats {\n                comments\n                quotes\n                reposts\n                reactions\n            }\n            creator {\n                address\n                profile {\n                    pfp\n                    bio\n                    display_name\n                }\n                username {\n                    username\n                }\n                id\n            }\n            publication_ref\n            parent {\n                __typename\n                id\n                timestamp\n                content\n                type\n                creator {\n                    address\n                    profile {\n                        pfp\n                        bio\n                        display_name\n                    }\n                    username {\n                        username\n                    }\n                    id\n                }\n                publication_ref\n                stats {\n                    comments\n                    quotes\n                    reposts\n                    reactions\n                }\n            }\n            community {\n                name\n                image\n            }\n        }\n    }\n\n": types.CommunityPublicationsDocument,
    "\n    query Membership ($communityName: String!, $userAddress: String!) {\n        membership(communityName: $communityName, userAddress: $userAddress) {\n            id\n            community_id \n            type \n            user_kid\n            timestamp\n            is_active\n        }\n    }\n": types.MembershipDocument,
    "\n    query Accounts($search: String, $page: Int!, $size: Int!) {\n        accounts(search: $search, pagination: {page: $page, size: $size}) {\n            id\n            address\n            timestamp\n            profile {\n                pfp\n                bio\n                display_name\n            }\n            username {\n                username\n            }\n        }\n    }\n": types.AccountsDocument,
    "\n    query FollowAccount($address: String!, $viewer: String!) {\n        account(address: $address) {\n            viewer(address: $viewer) {\n                followed\n                follows\n                id\n            }\n        }\n    }\n": types.FollowAccountDocument,
    "\n    query AccountRelationship($viewerAddress: String!, $accountAddress: String!) {\n        accountRelationship(viewerAddress: $viewerAddress, accountAddress: $accountAddress) {\n            id\n            follows\n            followed\n        }\n    }\n": types.AccountRelationshipDocument,
    "\n    query Followers($accountAddress: String!, $page: Int!, $size: Int!) {\n        followers(\n            accountAddress: $accountAddress\n            pagination: { page: $page, size: $size }\n        ) {\n            address\n            profile {\n                pfp\n                bio\n                display_name\n            }\n            username {\n                username\n            }\n        }\n    }\n": types.FollowersDocument,
    "\n    query Following($accountAddress: String!, $page: Int!, $size: Int!) {\n        following(\n            accountAddress: $accountAddress\n            pagination: { page: $page, size: $size }\n        ) {\n            address\n            profile {\n                pfp\n                bio\n                display_name\n            }\n            username {\n                username\n            }\n        }\n    }\n": types.FollowingDocument,
    "\n    query Memberships($communityName: String!, $search: String) {\n        memberships(communityName: $communityName, search: $search) {\n            id\n            address\n            profile {\n                pfp\n                display_name\n                bio\n            }\n            username {\n                username\n            }\n        }\n    }\n": types.MembershipsDocument,
    "\n    query CommunitiesSearch($search: String!, $memberAddress: String!) {\n        communitiesSearch(search: $search, memberAddress: $memberAddress) {\n            id\n            name\n            description\n            image\n            timestamp\n            display_name\n        }\n    }\n": types.CommunitiesSearchDocument,
    "\nquery AccountsSearch($search: String!, $userAddress: String!) {\n    accountsSearch(search: $search, userAddress: $userAddress) {\n        address\n        id\n        profile {\n            pfp\n            bio\n            display_name\n        }\n        username {\n            username\n        }\n    }\n}\n": types.AccountsSearchDocument,
    "\n    query UserNotifications($accountAddress: String!, $page: Int!, $size: Int!) {\n        userNotifications(\n            accountAddress: $accountAddress,\n            pagination: { page: $page, size: $size }\n        ) {\n            referenceUserId\n            type\n            timestamp\n            referenceDataId\n            referenceUser {\n                address\n                username {\n                    username\n                }\n                profile {\n                    pfp\n                    display_name\n                }\n            }\n            follow {\n                follower {\n                    address\n                    profile {\n                        pfp\n                        display_name\n                    }\n                }\n            }\n            publication {\n                content\n                type\n                creator {\n                    profile {\n                        pfp\n                        display_name\n                    }\n                }\n                publication_ref\n                parent {\n                    content\n                    type\n                    publication_ref\n                }\n            }\n            reaction {\n                publication_id\n                reaction\n                publication {\n                    content\n                }\n                creator {\n                    profile {\n                        display_name\n                        pfp\n\n                    },\n                    username {\n                        username\n                    }   \n                }\n            }\n        }\n    }\n": types.UserNotificationsDocument,
    "\n    query AccountUserName($accountAddress: String!) {\n        accountUserName(\n            accountAddress: $accountAddress\n        ) {\n            username\n            owner_address\n            token_address\n            timestamp\n        }\n    }\n": types.AccountUserNameDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Publications($page: Int!, $size: Int!, $type: Int, $address: String, $types: [Int!], $reaction: Int, $hide: [String!], $muted: [Int!]){\n        publications(pagination: { page: $page, size: $size }, type: $type, creator_address: $address, types: $types, reaction: $reaction, hide: $hide, muted: $muted) {\n            __typename\n            id,\n            timestamp\n            content\n            type\n            stats {\n                comments\n                quotes\n                reposts\n                reactions\n            }\n            creator {\n                address\n                profile {\n                    pfp\n                    bio\n                    display_name\n                }\n                username {\n                    username\n                }\n                id\n            },\n            publication_ref,\n            parent {\n                __typename\n                id,\n                timestamp\n                content\n                type\n                creator {\n                    address\n                    profile {\n                        pfp\n                        bio\n                        display_name\n                    }\n                    username {\n                        username\n                    }\n                    id\n                },\n                publication_ref,\n                stats {\n                    comments\n                    quotes\n                    reposts\n                    reactions\n                }\n            }\n            community {\n                name\n                image\n            }\n        }\n    }\n"): (typeof documents)["\n    query Publications($page: Int!, $size: Int!, $type: Int, $address: String, $types: [Int!], $reaction: Int, $hide: [String!], $muted: [Int!]){\n        publications(pagination: { page: $page, size: $size }, type: $type, creator_address: $address, types: $types, reaction: $reaction, hide: $hide, muted: $muted) {\n            __typename\n            id,\n            timestamp\n            content\n            type\n            stats {\n                comments\n                quotes\n                reposts\n                reactions\n            }\n            creator {\n                address\n                profile {\n                    pfp\n                    bio\n                    display_name\n                }\n                username {\n                    username\n                }\n                id\n            },\n            publication_ref,\n            parent {\n                __typename\n                id,\n                timestamp\n                content\n                type\n                creator {\n                    address\n                    profile {\n                        pfp\n                        bio\n                        display_name\n                    }\n                    username {\n                        username\n                    }\n                    id\n                },\n                publication_ref,\n                stats {\n                    comments\n                    quotes\n                    reposts\n                    reactions\n                }\n            }\n            community {\n                name\n                image\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query MyProfile($address: String!) {\n    account(address: $address) {\n        id\n        address\n        profile {\n            display_name\n            bio\n            pfp\n        }\n        username {\n            username\n        }\n        timestamp\n    }\n}\n"): (typeof documents)["\n    query MyProfile($address: String!) {\n    account(address: $address) {\n        id\n        address\n        profile {\n            display_name\n            bio\n            pfp\n        }\n        username {\n            username\n        }\n        timestamp\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query AccountStats($accountAddress: String!) {\n        accountStats(accountAddress: $accountAddress) {\n            followers\n            following\n        }\n    }\n"): (typeof documents)["\n    query AccountStats($accountAddress: String!) {\n        accountStats(accountAddress: $accountAddress) {\n            followers\n            following\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query AccountViewerStats($accountAddress: String!, $viewerAddress: String!) {\n    accountViewerStats(\n        accountAddress: $accountAddress\n        viewerAddress: $viewerAddress\n    ) {\n        id\n        follows\n        followed\n    }\n}\n"): (typeof documents)["\n    query AccountViewerStats($accountAddress: String!, $viewerAddress: String!) {\n    accountViewerStats(\n        accountAddress: $accountAddress\n        viewerAddress: $viewerAddress\n    ) {\n        id\n        follows\n        followed\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Publication($postRef: String!){\n        publication(ref: $postRef){\n            __typename\n            id,\n                timestamp\n                content\n                stats {\n                    comments\n                    quotes\n                    reposts\n                    reactions\n                }\n                creator {\n                    address\n                    profile {\n                        pfp\n                        bio\n                        display_name\n                    }\n                    username {\n                        username\n                    }\n                    id\n                },\n                publication_ref\n                parent {\n                    __typename\n                    id,\n                    timestamp\n                    content\n                    type\n                    creator_id\n                    creator {\n                        address\n                        profile {\n                            pfp\n                            bio\n                            display_name\n                        }\n                        username {\n                            username\n                        }\n                        id\n                    },\n                    publication_ref,\n                    stats {\n                        comments\n                        quotes\n                        reposts\n                        reactions\n                    }\n                }\n        }\n    }\n"): (typeof documents)["\n    query Publication($postRef: String!){\n        publication(ref: $postRef){\n            __typename\n            id,\n                timestamp\n                content\n                stats {\n                    comments\n                    quotes\n                    reposts\n                    reactions\n                }\n                creator {\n                    address\n                    profile {\n                        pfp\n                        bio\n                        display_name\n                    }\n                    username {\n                        username\n                    }\n                    id\n                },\n                publication_ref\n                parent {\n                    __typename\n                    id,\n                    timestamp\n                    content\n                    type\n                    creator_id\n                    creator {\n                        address\n                        profile {\n                            pfp\n                            bio\n                            display_name\n                        }\n                        username {\n                            username\n                        }\n                        id\n                    },\n                    publication_ref,\n                    stats {\n                        comments\n                        quotes\n                        reposts\n                        reactions\n                    }\n                }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query PublicationStats($publication_ref: String!){\n        publicationStats(ref: $publication_ref) {\n        __typename\n        reposts\n        quotes\n        comments\n        reactions\n        ref\n    }\n    }\n"): (typeof documents)["\n    query PublicationStats($publication_ref: String!){\n        publicationStats(ref: $publication_ref) {\n        __typename\n        reposts\n        quotes\n        comments\n        reactions\n        ref\n    }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query PublicationInteractionsByViewer($ref: String!, $address: String!){\n        publicationInteractionsByViewer(ref: $ref , address: $address) {\n            __typename\n            reacted\n            quoted\n            quote_refs\n            commented\n            comment_refs\n            reposted\n            repost_refs\n            ref\n        }\n    }\n"): (typeof documents)["\n    query PublicationInteractionsByViewer($ref: String!, $address: String!){\n        publicationInteractionsByViewer(ref: $ref , address: $address) {\n            __typename\n            reacted\n            quoted\n            quote_refs\n            commented\n            comment_refs\n            reposted\n            repost_refs\n            ref\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query PublicationComments($publication_ref: String!, $page: Int!, $size: Int!, $hide: [String!], $muted: [Int!]) {\n        publicationComments(ref: $publication_ref, pagination: { page: $page, size: $size }, hide: $hide, muted: $muted) {\n            id\n            content\n            type\n            timestamp\n            publication_ref\n            creator {\n                address\n                profile {\n                    pfp\n                    bio\n                    display_name\n                }\n                username {\n                    username\n                }\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    query PublicationComments($publication_ref: String!, $page: Int!, $size: Int!, $hide: [String!], $muted: [Int!]) {\n        publicationComments(ref: $publication_ref, pagination: { page: $page, size: $size }, hide: $hide, muted: $muted) {\n            id\n            content\n            type\n            timestamp\n            publication_ref\n            creator {\n                address\n                profile {\n                    pfp\n                    bio\n                    display_name\n                }\n                username {\n                    username\n                }\n                id\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Communities($search: String, $page: Int!, $size: Int!, $member: String) {\n        communities(search: $search, pagination: {page: $page, size: $size}, memberAddress: $member) {\n            id\n            name\n            description\n            image\n            timestamp\n            display_name\n        }\n    }\n"): (typeof documents)["\n    query Communities($search: String, $page: Int!, $size: Int!, $member: String) {\n        communities(search: $search, pagination: {page: $page, size: $size}, memberAddress: $member) {\n            id\n            name\n            description\n            image\n            timestamp\n            display_name\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Community($name: String!){\n        community(name: $name) {\n            id\n            name\n            description\n            image\n            timestamp\n            display_name\n            creator {\n                address\n                username {\n                    username\n                }        \n            } \n            stats {\n                members\n                publications\n            }\n        }\n    }\n"): (typeof documents)["\n    query Community($name: String!){\n        community(name: $name) {\n            id\n            name\n            description\n            image\n            timestamp\n            display_name\n            creator {\n                address\n                username {\n                    username\n                }        \n            } \n            stats {\n                members\n                publications\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query CommunityPublications($page: Int!, $size: Int!, $communityName: String!, $hide: [String!], $muted: [Int!]) {\n        communityPublications(\n            pagination: { page: $page, size: $size }\n            communityName: $communityName,\n            hide: $hide,\n            muted: $muted\n        ) {\n            __typename\n            id\n            timestamp\n            content\n            type\n            stats {\n                comments\n                quotes\n                reposts\n                reactions\n            }\n            creator {\n                address\n                profile {\n                    pfp\n                    bio\n                    display_name\n                }\n                username {\n                    username\n                }\n                id\n            }\n            publication_ref\n            parent {\n                __typename\n                id\n                timestamp\n                content\n                type\n                creator {\n                    address\n                    profile {\n                        pfp\n                        bio\n                        display_name\n                    }\n                    username {\n                        username\n                    }\n                    id\n                }\n                publication_ref\n                stats {\n                    comments\n                    quotes\n                    reposts\n                    reactions\n                }\n            }\n            community {\n                name\n                image\n            }\n        }\n    }\n\n"): (typeof documents)["\n    query CommunityPublications($page: Int!, $size: Int!, $communityName: String!, $hide: [String!], $muted: [Int!]) {\n        communityPublications(\n            pagination: { page: $page, size: $size }\n            communityName: $communityName,\n            hide: $hide,\n            muted: $muted\n        ) {\n            __typename\n            id\n            timestamp\n            content\n            type\n            stats {\n                comments\n                quotes\n                reposts\n                reactions\n            }\n            creator {\n                address\n                profile {\n                    pfp\n                    bio\n                    display_name\n                }\n                username {\n                    username\n                }\n                id\n            }\n            publication_ref\n            parent {\n                __typename\n                id\n                timestamp\n                content\n                type\n                creator {\n                    address\n                    profile {\n                        pfp\n                        bio\n                        display_name\n                    }\n                    username {\n                        username\n                    }\n                    id\n                }\n                publication_ref\n                stats {\n                    comments\n                    quotes\n                    reposts\n                    reactions\n                }\n            }\n            community {\n                name\n                image\n            }\n        }\n    }\n\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Membership ($communityName: String!, $userAddress: String!) {\n        membership(communityName: $communityName, userAddress: $userAddress) {\n            id\n            community_id \n            type \n            user_kid\n            timestamp\n            is_active\n        }\n    }\n"): (typeof documents)["\n    query Membership ($communityName: String!, $userAddress: String!) {\n        membership(communityName: $communityName, userAddress: $userAddress) {\n            id\n            community_id \n            type \n            user_kid\n            timestamp\n            is_active\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Accounts($search: String, $page: Int!, $size: Int!) {\n        accounts(search: $search, pagination: {page: $page, size: $size}) {\n            id\n            address\n            timestamp\n            profile {\n                pfp\n                bio\n                display_name\n            }\n            username {\n                username\n            }\n        }\n    }\n"): (typeof documents)["\n    query Accounts($search: String, $page: Int!, $size: Int!) {\n        accounts(search: $search, pagination: {page: $page, size: $size}) {\n            id\n            address\n            timestamp\n            profile {\n                pfp\n                bio\n                display_name\n            }\n            username {\n                username\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query FollowAccount($address: String!, $viewer: String!) {\n        account(address: $address) {\n            viewer(address: $viewer) {\n                followed\n                follows\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    query FollowAccount($address: String!, $viewer: String!) {\n        account(address: $address) {\n            viewer(address: $viewer) {\n                followed\n                follows\n                id\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query AccountRelationship($viewerAddress: String!, $accountAddress: String!) {\n        accountRelationship(viewerAddress: $viewerAddress, accountAddress: $accountAddress) {\n            id\n            follows\n            followed\n        }\n    }\n"): (typeof documents)["\n    query AccountRelationship($viewerAddress: String!, $accountAddress: String!) {\n        accountRelationship(viewerAddress: $viewerAddress, accountAddress: $accountAddress) {\n            id\n            follows\n            followed\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Followers($accountAddress: String!, $page: Int!, $size: Int!) {\n        followers(\n            accountAddress: $accountAddress\n            pagination: { page: $page, size: $size }\n        ) {\n            address\n            profile {\n                pfp\n                bio\n                display_name\n            }\n            username {\n                username\n            }\n        }\n    }\n"): (typeof documents)["\n    query Followers($accountAddress: String!, $page: Int!, $size: Int!) {\n        followers(\n            accountAddress: $accountAddress\n            pagination: { page: $page, size: $size }\n        ) {\n            address\n            profile {\n                pfp\n                bio\n                display_name\n            }\n            username {\n                username\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Following($accountAddress: String!, $page: Int!, $size: Int!) {\n        following(\n            accountAddress: $accountAddress\n            pagination: { page: $page, size: $size }\n        ) {\n            address\n            profile {\n                pfp\n                bio\n                display_name\n            }\n            username {\n                username\n            }\n        }\n    }\n"): (typeof documents)["\n    query Following($accountAddress: String!, $page: Int!, $size: Int!) {\n        following(\n            accountAddress: $accountAddress\n            pagination: { page: $page, size: $size }\n        ) {\n            address\n            profile {\n                pfp\n                bio\n                display_name\n            }\n            username {\n                username\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Memberships($communityName: String!, $search: String) {\n        memberships(communityName: $communityName, search: $search) {\n            id\n            address\n            profile {\n                pfp\n                display_name\n                bio\n            }\n            username {\n                username\n            }\n        }\n    }\n"): (typeof documents)["\n    query Memberships($communityName: String!, $search: String) {\n        memberships(communityName: $communityName, search: $search) {\n            id\n            address\n            profile {\n                pfp\n                display_name\n                bio\n            }\n            username {\n                username\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query CommunitiesSearch($search: String!, $memberAddress: String!) {\n        communitiesSearch(search: $search, memberAddress: $memberAddress) {\n            id\n            name\n            description\n            image\n            timestamp\n            display_name\n        }\n    }\n"): (typeof documents)["\n    query CommunitiesSearch($search: String!, $memberAddress: String!) {\n        communitiesSearch(search: $search, memberAddress: $memberAddress) {\n            id\n            name\n            description\n            image\n            timestamp\n            display_name\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery AccountsSearch($search: String!, $userAddress: String!) {\n    accountsSearch(search: $search, userAddress: $userAddress) {\n        address\n        id\n        profile {\n            pfp\n            bio\n            display_name\n        }\n        username {\n            username\n        }\n    }\n}\n"): (typeof documents)["\nquery AccountsSearch($search: String!, $userAddress: String!) {\n    accountsSearch(search: $search, userAddress: $userAddress) {\n        address\n        id\n        profile {\n            pfp\n            bio\n            display_name\n        }\n        username {\n            username\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query UserNotifications($accountAddress: String!, $page: Int!, $size: Int!) {\n        userNotifications(\n            accountAddress: $accountAddress,\n            pagination: { page: $page, size: $size }\n        ) {\n            referenceUserId\n            type\n            timestamp\n            referenceDataId\n            referenceUser {\n                address\n                username {\n                    username\n                }\n                profile {\n                    pfp\n                    display_name\n                }\n            }\n            follow {\n                follower {\n                    address\n                    profile {\n                        pfp\n                        display_name\n                    }\n                }\n            }\n            publication {\n                content\n                type\n                creator {\n                    profile {\n                        pfp\n                        display_name\n                    }\n                }\n                publication_ref\n                parent {\n                    content\n                    type\n                    publication_ref\n                }\n            }\n            reaction {\n                publication_id\n                reaction\n                publication {\n                    content\n                }\n                creator {\n                    profile {\n                        display_name\n                        pfp\n\n                    },\n                    username {\n                        username\n                    }   \n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query UserNotifications($accountAddress: String!, $page: Int!, $size: Int!) {\n        userNotifications(\n            accountAddress: $accountAddress,\n            pagination: { page: $page, size: $size }\n        ) {\n            referenceUserId\n            type\n            timestamp\n            referenceDataId\n            referenceUser {\n                address\n                username {\n                    username\n                }\n                profile {\n                    pfp\n                    display_name\n                }\n            }\n            follow {\n                follower {\n                    address\n                    profile {\n                        pfp\n                        display_name\n                    }\n                }\n            }\n            publication {\n                content\n                type\n                creator {\n                    profile {\n                        pfp\n                        display_name\n                    }\n                }\n                publication_ref\n                parent {\n                    content\n                    type\n                    publication_ref\n                }\n            }\n            reaction {\n                publication_id\n                reaction\n                publication {\n                    content\n                }\n                creator {\n                    profile {\n                        display_name\n                        pfp\n\n                    },\n                    username {\n                        username\n                    }   \n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query AccountUserName($accountAddress: String!) {\n        accountUserName(\n            accountAddress: $accountAddress\n        ) {\n            username\n            owner_address\n            token_address\n            timestamp\n        }\n    }\n"): (typeof documents)["\n    query AccountUserName($accountAddress: String!) {\n        accountUserName(\n            accountAddress: $accountAddress\n        ) {\n            username\n            owner_address\n            token_address\n            timestamp\n        }\n    }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;